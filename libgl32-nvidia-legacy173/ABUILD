# ABUILD generated by mkpkg_generator.sh

pkgname=nvidia-driver-legacy173
pkgver=173.14.37
pkgbasever=${pkgver}
pkgbuild=1
pkgbasebuild=${pkgbuild}
arch=('auto')
provides=nvidia-driver
mesa_version=8.0.4
shortdesc=('NVIDIA driver for GeForce FX (5xxx) series')
longdesc=('This is the proprietary binary video driver for legacy cards (Geforce 5) from nvidia for the X.org X server.This is the proprietary binary video driver for legacy cards (Geforce 5) from nvidia for the X.org X server.')

tags=('drivers proprietary x11-drivers')

TARGET="x86"
if [ "`uname -m`" = "x86_64" ] ; then
	TARGET="x86_64"
	pkglist="libgl_nvidia libglx_nvidia libgl32_nvidia"
	gendeps_blacklist='usr/bin/nvidia-settings
	usr/lib/'
	pkgvariant=2
else
	pkglist="libgl_nvidia libglx_nvidia"
	pkgvariant=1
fi

source=("ftp://download.nvidia.com/XFree86/Linux-${TARGET}/${pkgver}/NVIDIA-Linux-${TARGET}-${pkgver}-pkg${pkgvariant}.run n")
adddep="mesa xorg-server>=1.10 libXvMC libgl libglx"
build_deps='glibc-solibs'

libgl_nvidia() {
	pkgname=libgl-nvidia-legacy173
	shortdesc="libGL from nvidia-legacy173 driver. Replaces mesa-based libgl package for nvidia users"
	longdesc="libGL from nvidia-legacy173 driver. Replaces mesa-based libgl package for nvidia users"
	provides=libgl
	# Force version to match mesa version
	adddep="nvidia-driver==${pkgbasever}"
	pkgbuild=${pkgbasever}_${pkgbasebuild}
	pkgver=${mesa_version}
}

libgl32_nvidia() {
	pkgname=libgl32-nvidia-legacy173
	shortdesc="libGL (32-bit compatibility libs) from nvidia-legacy173 driver. Replaces mesa-based libgl package for nvidia users"
	longdesc="libGL (32-bit compatibility libs) from nvidia-legacy173 driver. Replaces mesa-based libgl package for nvidia users"
	provides=libgl32
	# Force version to match mesa version
	adddep="nvidia-driver==${pkgbasever}"
	pkgbuild=${pkgbasever}_${pkgbasebuild}
	pkgver=${mesa_version}
	tags='compat32 x11-libs'
	
}


libglx_nvidia() {
	pkgname=libglx-nvidia-legacy173
	shortdesc="libglx from nvidia-legacy173 driver. Replaces xorg-based libglx package for nvidia users"
	longdesc="libglx from nvidia-legacy173 driver. Replaces xorg-based libglx package for nvidia users"
	provides=libglx
	# Force version to match mesa version
	adddep="nvidia-driver==${pkgbasever}"
	pkgver=${pkgbasever}
	pkgbuild=${pkgbasebuild}
}

libgl_nvidia_prep() {
	set -e
	cd $srcdir
	mkdir -p ${pkgdir}/usr/lib${LIBDIRSUFFIX}
	mv ${p_pkgdir}/usr/lib${LIBDIRSUFFIX}/libGL.* ${pkgdir}/usr/lib${LIBDIRSUFFIX}/
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; ln -s libGL.so.${p_pkgver} libGL.so.1 )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; ln -s libGL.so.1 libGL.so )
	sed -i "s|__LIBGL_PATH__|/usr/lib$LIBDIRSUFFIX/|" ${pkgdir}/usr/lib$LIBDIRSUFFIX/libGL.la
	sed -i "s|/usr/X11R6/lib|/usr/lib$LIBDIRSUFFIX/|" ${pkgdir}/usr/lib$LIBDIRSUFFIX/libGL.la

	set +e
}

libglx_nvidia_prep() {
	set -e
	cd $srcdir
	mkdir -p ${pkgdir}/usr/lib${LIBDIRSUFFIX}/xorg/modules/extensions

	mv ${p_pkgdir}/usr/lib$LIBDIRSUFFIX/xorg/modules/extensions/libglx.so* ${pkgdir}/usr/lib$LIBDIRSUFFIX/xorg/modules/extensions/

	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX}/xorg/modules/extensions ; ln -s libglx.so.${pkgver} libglx.so )
	set +e

}

libgl32_nvidia_prep() {
	set -e
	cd $srcdir/NVIDIA-Linux-${TARGET}-${p_pkgver}-pkg${pkgvariant}
	# 32-bit compat libraries
	cd usr/lib32
		mkdir -p ${pkgdir}/usr/lib
		cp -arv * $pkgdir/usr/lib
		( cd ${pkgdir}/usr/lib ; ln -s libGL.so.${p_pkgver} libGL.so.1 )
		( cd ${pkgdir}/usr/lib ; ln -s libGL.so.1 libGL.so )
	cd -
	set +e
}
build() {
	set -e
	cd $srcdir
	sh $srcache/NVIDIA-Linux-${TARGET}-${pkgver}-pkg${pkgvariant}.run --extract-only
	cd NVIDIA-Linux-${TARGET}-${pkgver}-pkg${pkgvariant}
	chown -R root:root .
	chmod -R u+w,go+r-w,a-s .



	mkdir -p $pkgdir/usr/{bin,share,lib$LIBDIRSUFFIX,sbin} $pkgdir/usr/include/GL \
		$pkgdir/usr/lib$LIBDIRSUFFIX/xorg/modules/{drivers,extensions}

	# Start with the libraries
	cd usr/lib
		cp -a * ${pkgdir}/usr/lib$LIBDIRSUFFIX	
	cd -

	# This is the driver itself
	cd usr/X11R6/lib
		cp -a * ${pkgdir}/usr/lib$LIBDIRSUFFIX/xorg/
		for i in libXvMCNVIDIA.a libXvMCNVIDIA.so.${pkgver}; do
			mv ${pkgdir}/usr/lib$LIBDIRSUFFIX/xorg/$i ${pkgdir}/usr/lib$LIBDIRSUFFIX/ ;
		done

	cd -


	# Next come the apps
	cp -a nvidia-installer ${pkgdir}/usr/bin/
	cd usr/bin
		for i in nvidia*; do
			cp -a $i ${pkgdir}/usr/bin/
		done
	cd -

	# XDG stuff
	cd usr/share
		for i in applications pixmaps; do
			cp -a $i ${pkgdir}/usr/share/
		done
		cp -a man* ${pkgdir}/usr/
	cd -

	# Self written bash script which I use to switch between nvidia and nv.
	# It is now also used by doinst.sh to switch to the nvidia-driver right
	# after installation.
	#install -m 0755 $filedir/nvidia-switch ${pkgdir}/usr/sbin/
	#sed -i s/PKGVERSION/${pkgver}/g ${pkgdir}/usr/sbin/nvidia-switch
	#sed -i s/LIBDIRSUFFIX/$LIBDIRSUFFIX/g ${pkgdir}/usr/sbin/nvidia-switch

	# These correct wrong paths
	sed -i "s|__UTILS_PATH__|/usr/bin|" \
		${pkgdir}/usr/share/applications/nvidia-settings.desktop
	sed -i "s|__PIXMAP_PATH__|/usr/share/pixmaps|" \
		${pkgdir}/usr/share/applications/nvidia-settings.desktop



	mkdir -p $pkgdir/etc/X11/xorg.conf.d
	cat $filedir/20-nvidia.conf > $pkgdir/etc/X11/xorg.conf.d/20-nvidia.conf

	# libnvidia-wfb isn't needed anymore
	rm ${pkgdir}/usr/lib${LIBDIRSUFFIX}/xorg/modules/libnvidia-wfb.*
	
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX}/tls ; rm -rf libnvidia-tls.so.1 )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX}/tls ; ln -sf libnvidia-tls.so.${pkgver} libnvidia-tls.so.1 )

	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; rm -rf libnvidia-cfg.so.1 )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; ln -sf libnvidia-cfg.so.${pkgver} libnvidia-cfg.so.1 )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; rm -rf libnvidia-tls.so.1 )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; ln -sf libnvidia-tls.so.${pkgver} libnvidia-tls.so.1 )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; rm -rf libXvMCNVIDIA_dynamic.so.1 )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; ln -sf libXvMCNVIDIA.so.${pkgver} libXvMCNVIDIA_dynamic.so.1 )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; rm -rf libnvidia-cfg.so )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; ln -sf libnvidia-cfg.so.1 libnvidia-cfg.so )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; rm -rf libcuda.so.1 )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; ln -sf libcuda.so.${pkgver} libcuda.so.1 )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; rm -rf libcuda.so )
	( cd ${pkgdir}/usr/lib${LIBDIRSUFFIX} ; ln -sf libcuda.so.1 libcuda.so )



	set +e
	
}

